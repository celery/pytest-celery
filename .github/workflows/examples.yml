# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: examples

on:
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/examples.yml"
      - 'src/pytest_celery/vendors/worker/**'
      - "**.py"
      - "**.txt"
      - "**.toml"
      - "tox.ini"
      - 'Dockerfile'
      - "poetry.lock"
  pull_request:
    paths:
      - ".github/workflows/examples.yml"
      - 'src/pytest_celery/vendors/worker/**'
      - "**.py"
      - "**.txt"
      - "**.toml"
      - "tox.ini"
      - 'Dockerfile'
      - "poetry.lock"

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  myworker:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        os: ["ubuntu-latest"]

    steps:
      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt update
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/setup.py'
      - name: Install dependencies
        working-directory: examples/myworker
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: examples/myworker
        timeout-minutes: 10
        run: |
          pytest -xsv tests

  range:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        os: ["ubuntu-latest"]

    steps:
      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt update
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/setup.py'
      - name: Install dependencies
        working-directory: examples/range
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: examples/range
        timeout-minutes: 30
        run: |
          pytest -xsv tests

  rabbitmq_management:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        os: ["ubuntu-latest"]

    steps:
      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt update
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/setup.py'
      - name: Install dependencies
        working-directory: examples/rabbitmq_management
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: examples/rabbitmq_management
        timeout-minutes: 10
        run: |
          pytest -xsv tests

  django:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        os: ["ubuntu-latest"]

    steps:
      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt update
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/setup.py'
      - name: Install dependencies
        working-directory: examples/django
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Migrations
        working-directory: examples/django
        run: |
          ./manage.py migrate

      - name: Run tests
        working-directory: examples/django
        timeout-minutes: 10
        run: |
          export DJANGO_SETTINGS_MODULE=proj.settings
          pytest -xsv tests

  myutils:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        os: ["ubuntu-latest"]

    steps:
      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt update
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/setup.py'
      - name: Install dependencies
        working-directory: examples/myutils
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: examples/myutils
        timeout-minutes: 10
        run: |
          pytest -xsv tests

  worker_pool:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        os: ["ubuntu-latest"]

    steps:
      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt update
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/setup.py'
      - name: Install dependencies
        working-directory: examples/worker_pool
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: examples/worker_pool
        timeout-minutes: 10
        run: |
          pytest -xsv tests

  hybrid_setup:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        os: ["ubuntu-latest"]

    steps:
      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt update
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/setup.py'
      - name: Install dependencies
        working-directory: examples/hybrid_setup
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: examples/hybrid_setup
        timeout-minutes: 10
        run: |
          pytest -xsv tests

  vhost:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        os: ["ubuntu-latest"]

    steps:
      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt update
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/setup.py'
      - name: Install dependencies
        working-directory: examples/vhost
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: examples/vhost
        timeout-minutes: 10
        run: |
          pytest -xsv tests
