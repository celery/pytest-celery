[tox]
requires =
    tox>4
    tox-gh-actions
envlist =
    {py38,py39,py310,py311,py312}-unit
    {py38,py39,py310,py311,py312}-integration
    {py38,py39,py310,py311,py312}-smoke
suicide_timeout = 1

[gh-actions]
python =
    3.8: py38-unit, py38-integration, py38-smoke
    3.9: py39-unit, py39-integration, py39-smoke
    3.10: py310-unit, py310-integration, py310-smoke
    3.11: py311-unit, py311-integration, py311-smoke
    3.12: py312-unit, py312-integration, py312-smoke

[testenv]
description =
    Run tests under {basepython}
skip_install = true
allowlist_externals = poetry, pytest, bash, tox
setenv =
    PYTHONUNBUFFERED = 1
    PYTHONDONTWRITEBYTECODE = 1
commands_pre =
    poetry install --with dev,test
commands =
    unit: poetry run pytest tests/unit/ --maxfail=3 {posargs}
    integration: poetry run pytest tests/integration/ --exitfirst --dist=loadscope {posargs}
    smoke: poetry run pytest tests/smoke/ --exitfirst --dist=loadscope {posargs}
basepython =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    pypy3: pypy3
    mypy: py312
    lint: py312
    clean: py312
    xdist: py312
    parallel: py312
usedevelop = True

[testenv:xdist]
setenv =
    PYTHONUNBUFFERED = 1
    PYTHONDONTWRITEBYTECODE = 1
commands =
    poetry run pytest tests --exitfirst \
    -n auto --dist=loadscope \
    --reruns 5 --rerun-except AssertionError \
    {posargs}

[testenv:parallel]
setenv =
    PYTHONUNBUFFERED = 1
    PYTHONDONTWRITEBYTECODE = 1
commands =
    tox -e py312-unit,py312-integration,py312-smoke -p auto -o -- --exitfirst \
    -n auto --dist=loadscope \
    --reruns 5 --reruns-delay 60 --rerun-except AssertionError \
    {posargs}

[testenv:mypy]
commands_pre =
    poetry install --only dev
    poetry run mypy --install-types --non-interactive
commands =
    poetry run mypy --config-file pyproject.toml

[testenv:lint]
commands_pre =
    poetry install --only dev
commands =
    poetry run pre-commit {posargs:run --all-files --show-diff-on-failure}

[testenv:clean]
allowlist_externals = poetry, pytest, bash, find
commands_pre =
    poetry install --only dev
commands =
    poetry run cleanpy .
    bash -c 'files=$(find . -name "*.coverage*" -type f); if [ -n "$files" ]; then echo "Removed coverage file(s):"; echo "$files" | tr " " "\n"; rm $files; fi'
    bash -c 'containers=$(docker ps -aq --filter label=creator=pytest-docker-tools); if [ -n "$containers" ]; then echo "Removed Docker container(s):"; docker rm -f $containers; fi'
    bash -c 'networks=$(docker network ls --filter name=pytest- -q); if [ -n "$networks" ]; then echo "Removed Docker network(s):"; docker network rm $networks; fi'
    bash -c 'volumes=$(docker volume ls --filter name=pytest- -q); if [ -n "$volumes" ]; then echo "Removed Docker volume(s):"; docker volume rm $volumes; fi'
