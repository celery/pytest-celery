[tox]
isolated_build = true
requires =
    tox>4
    tox-gh-actions
envlist =
    {py38,py39,py310,py311}-unit
    {py38,py39,py310,py311}-integration
    {py38,py39,py310,py311}-smoke
suicide_timeout = 1

[gh-actions]
python =
    3.8: py38-unit, py38-integration, py38-smoke
    3.9: py39-unit, py39-integration, py39-smoke
    3.10: py310-unit, py310-integration, py310-smoke
    3.11: py311-unit, py311-integration, py311-smoke

[testenv]
description =
    Run tests under {basepython}
skip_install = true
allowlist_externals = poetry, pytest, bash, tox
setenv =
    PYTHONUNBUFFERED = 1
    PYTHONDONTWRITEBYTECODE = 1
commands_pre =
    poetry install --with dev,test
commands =
    unit: python3 -m pytest tests/unit/ --maxfail=3 {posargs}
    integration: python3 -m pytest tests/integration/ --exitfirst {posargs}
    smoke: python3 -m pytest tests/smoke/ --exitfirst {posargs}
basepython =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    pypy3: pypy3
    mypy: py311
    lint: py311
    clean: py311
    xdist: py311
    parallel: py311
usedevelop = True

[testenv:xdist]
setenv =
    PYTHONUNBUFFERED = 1
    PYTHONDONTWRITEBYTECODE = 1
commands =
    python3 -m pytest tests --exitfirst -n auto \
    --reruns 5 --rerun-except AssertionError {posargs}

[testenv:parallel]
setenv =
    PYTHONUNBUFFERED = 1
    PYTHONDONTWRITEBYTECODE = 1
commands =
    tox -e py311-unit,py311-integration,py311-smoke -p auto -o -- --exitfirst -n auto \
    --reruns 10 --reruns-delay 15 --rerun-except AssertionError {posargs}

[testenv:mypy]
commands_pre =
    poetry install --only dev
    python -m mypy --install-types --non-interactive
commands =
    python -m mypy --config-file pyproject.toml

[testenv:lint]
commands_pre =
    poetry install --only dev
commands =
    pre-commit {posargs:run --all-files --show-diff-on-failure}

[testenv:clean]
allowlist_externals = poetry, pytest, bash, find
commands_pre =
    poetry install --only dev
commands =
    python -m cleanpy .
    bash -c 'files=$(find . -name "*.coverage*" -type f); if [ -n "$files" ]; then echo "Removed coverage file(s):"; echo "$files" | tr " " "\n"; rm $files; fi'
    bash -c 'containers=$(docker ps -aq --filter label=creator=pytest-docker-tools); if [ -n "$containers" ]; then echo "Removed Docker container(s):"; docker rm -f $containers; fi'
    bash -c 'networks=$(docker network ls --filter name=pytest- -q); if [ -n "$networks" ]; then echo "Removed Docker network(s):"; docker network rm $networks; fi'
    bash -c 'volumes=$(docker volume ls --filter name=pytest- -q); if [ -n "$volumes" ]; then echo "Removed Docker volume(s):"; docker volume rm $volumes; fi'
